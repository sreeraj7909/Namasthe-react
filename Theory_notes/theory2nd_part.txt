1. What is npm

Ans: NPM dosn't stants for node package manager. Its actully a package manager which manages all the dependencies we are using in our project. It is a standard repository for all the packages (Official website for npm:npmjs.com) How to use npm in our project !! we initialise npm using the command npm init and provide neseccerry information and then a package .json file we get npm take care of the versions of the dependencies via package.json file.

2.What is `Parcel/Webpack`? Why do we need it?

Ans: so basically parcel and webpack are the types of bundlers we are used in our project and the bundlers are responsible for many things like Dependency management, code optimization, hot module replacement etc...

3.What is `.parcel-cache`

Ans: Parcel-cache is the directory or the folder generated automatically by the parcel bundler during the bundling process parcel used this folder to improve performance of oru project 
 
Cached Assets: Parcel caches processed assets like JavaScript, CSS, images, and other resources. These cached files help speed up subsequent builds by avoiding redundant processing of unchanged assets.

Dependency Cache: Parcel also caches dependency resolution information to optimize build times. This includes information about module dependencies, their versions, and their relationships, which Parcel uses to efficiently resolve dependencies during the bundling process.

Transform Cache: Parcel caches the results of transformation processes applied to source files. For example, if you're using a Babel or TypeScript transformation, Parcel will cache the output of these transformations to avoid reprocessing unchanged files.

Performance Optimization Data: Parcel may store other data related to performance optimization, such as code splitting information, tree-shaking results, and other build optimizations.

4. What is npx 

Ans: Npm is used to install packages and npx is used to execute packages

5.- What is difference between `dependencies` vs `devDependencies`

Normal dependencies are the dependencies that our project relies to fuction correlty on production when its delevered to the end users. dev dependencies are the dependencies only need in devlopment for examples testing packages and build tools . when a user download our application they only get normal dependencies . and when someone clone our project then only they will get the devdependency along with our project.

6. - What is Tree Shaking?

Ans:Tree shaking is a technique used by the bundlers like parcel Webpacke the term treeshake means shaking the tree for removing the damaged leefs and only remains the healthy ones
the bundler then removes the dead code from the final bundle, resulting in a smaller bundle size. This process is called "tree shaking" because it involves shaking the dependency tree to remove the dead branches.

7.- What is Hot Module Replacement?
 
Ans:Hot Module Replacement (HMR) is a feature in modern web development tools and frameworks that allows developers to update modules in an application without requiring a full page reload. Instead of refreshing the entire webpage, HMR selectively updates modules that have changed, preserving the application's state and speeding up the development process.

8.- List down your favourite 5 superpowers of Parcel and describe any 3 of them in your
own words

Ans: image optimization:In Parcel, image optimization can be automatically handled during the bundling process without requiring any additional configuration. When you import images into your project, Parcel analyzes them and optimizes them for production as part of the build process.

caching: caching allow parcel to reduce build time

File watching algorithm- which is written in c++
 
code spiting:

Error handling:

diffrential bundling: support older browsers


9. What is `.gitignore`? What should we add and not add into it?

Ans: The files we are added in gitignore will ignored by the git we need to add the file that can be regenerate into the gitignore.

10.- What is the difference between `package.json` and `package-lock.json`

Ans: it is the configration for our npm and its keep track of the version of the packages intalled on our project and package-lock.json file keeps tracks of the exact version of all the packags we have installed on our sysytem( it will lock the version and keep the record)

11. Why should I not modify `package-lock.json`?

Ans: package-lock.json is a file generated by npm that serves as a record of the exact version of each dependency installed in a project. It's designed to ensure consistent and reproducible builds across different development environments.

12. What is `node_modules` ? Is it a good idea to push that on git?

node_modules is a directory created by npm (Node Package Manager) to store all the dependencies (packages) required by a Node.js project. When you install dependencies using npm install or yarn install, npm/yarn fetches the required packages from the npm registry and installs them in the node_modules directory.

Here are some key points about the node_modules directory:

Dependencies Storage: node_modules contains all the dependencies listed in the package.json file of your project, as well as their transitive dependencies (dependencies of dependencies).

Version Control: It's generally not recommended to push the node_modules directory to version control systems like Git. This is because node_modules can be very large and contains a lot of files, which can bloat the size of your repository and slow down operations like cloning and pulling.

13.What is the `dist` folder?

Ans:dist folder contain the files that are ready to deployement It typically contains the final output or build artifacts of a project after it has been compiled, bundled, and optimized for production use.



